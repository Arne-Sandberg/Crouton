link(rel="import", href="/static/common/bower/polymer/polymer.html")
link(rel="import", href="/static/common/bower/paper-button/paper-button.html")


dom-module(id="crouton-device-card")
  template
    link(rel="stylesheet", href="crouton-device-card.css")
    div.deviceTitle
      span.deviceName {{deviceName}}
      span.deviceStatus {{connectionStatus}}
    div.deviceContent
      div.deviceDetails
        template(is="dom-if", if="{{deviceJson.description}}")
          div
            span.detailTitle Description:
            span {{deviceJson.description}}
        template(is="dom-if", if="{{deviceJson.status}}")
          div
            span.detailTitle Status:
            span {{deviceJson.status}}
      div.deviceButtons
        paper-button(disabled$="{{buttonCheck(connectionStatus)}}", on-click="toggleConnection", class$="{{connectionButtonBg(connectionStatus)}}", raised) {{displayButtonText(connectionStatus)}}
        template(is="dom-if", if="{{!buttonCheck(connectionStatus)}}")
          paper-button(disabled$="{{buttonCheck(connectionStatus)}}", on-click="removeDevice", raised).dark Remove


  script.
    (function() {
      Polymer({
        is: "crouton-device-card",
        ready: function() {
          this.devicesCard = document.getElementById("crouton-devices");
          this.mqttCard = document.getElementById("crouton-mqtt");
          this.croutonDashboard = document.getElementById("crouton-dashboard");
        },
        properties: {
          deviceName: {
            type: String
          },
          connectionStatus: {
            type: String,
            value: "connecting"
          },
          deviceJson: {
            type: Object,
            notify: true,
            value: {}
          },
          deviceValues: {
            type: Object,
            notify: true
          }
        },
        listeners: {

        },
        displayButtonText: function(connectionStatus){
          if(connectionStatus == "connected"){
            return "disconnect"
          }
          if(connectionStatus == "not connected"){
            return "connect"
          }
          return "connecting..."
        },
        buttonCheck: function(connectionStatus){
          if(connectionStatus == "connecting"){
            return true
          } else {
            return false
          }
        },
        connectionButtonBg: function(connectionStatus){
          if(connectionStatus == "connected"){
            return "dark"
          } else {
            return ""
          }
        },
        removeDevice: function(){
          this.devicesCard.removeDevice(this.deviceName);
          this.connectionStatus = "not connected";
          this.fire('makeToast', { message: "Device <b>" + this.deviceName + "</b> has been removed", duration: 3000, status: "exclamation-circle" });
          this.mqttCard.unsubscribeAddress("/outbox/" + this.deviceName + "/deviceInfo");
          this.unsubscribeDevice();
        },
        connectDevice: function(){
          this.connectionStatus = "connecting";
          this.mqttCard.connectDevice(this.deviceName,this);
        },
        disconnectDevice: function(){
          this.connectionStatus = "not connected";
          this.fire('makeToast', { message: "Device <b>" + this.deviceName + "</b> has been disconnected", duration: 3000, status: "exclamation-circle" });
          this.unsubscribeDevice();
        },
        forcedDisconnect: function(message){
          this.connectionStatus = "not connected";
          this.fire('makeToast', { message: "Device <b>" + this.deviceName + "</b> has been disconnected", duration: 3000, status: "exclamation-circle" });
          this.mqttCard.subscribeAddress("/outbox/" + this.deviceName + "/deviceInfo");
          this.mqttCard.checkAutoConnect[this.deviceName] = true;
          this.unsubscribeDevice();
        },
        subscribeDevice: function(){
          this.mqttCard.subscribeAddress("/outbox/" + this.deviceName + "/lwt");
          for (var key in this.deviceJson.endPoints){
            if (this.deviceJson.endPoints.hasOwnProperty(key)) {
              this.mqttCard.subscribeAddress("/outbox/" + this.deviceName + "/" + key);
            }
          }
        },
        unsubscribeDevice: function(){
          this.mqttCard.unsubscribeAddress("/outbox/" + this.deviceName + "/lwt");
          for (var address in this.deviceJson.endPoints){
            if (this.deviceJson.endPoints.hasOwnProperty(address)) {
              this.mqttCard.unsubscribeAddress("/outbox/" + this.deviceName + "/" + address);
              this.croutonDashboard.removeDeviceEndPoint(this.deviceName,address);
            }
          }
        },
        toggleConnection: function(){
          if(this.connectionStatus == "connected"){
            this.disconnectDevice();
          } else if(this.connectionStatus == "not connected"){
            this.connectDevice();
          }
        },
      });
    }());
